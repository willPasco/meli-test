name: Android Build and Deploy

on:
  push:
    branches:
      - 'release/*'  

jobs:
  create-apk:
    runs-on: ubuntu-latest

    steps:
      - name: Check out 
        uses: actions/checkout@v4

      - name: Setup JDK 17    
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create Google Services json
        run: |
          cat <<EOF > ${{ github.workspace }}/app/google-services.json
          ${{ secrets.GOOGLE_SERVICES_JSON }}
          EOF


      - name: Create NetworkSecurity.cpp
        run: |
          cat <<EOF > ${{ github.workspace }}/core/network/implementation/src/main/cpp/com/will/core/network/security/NetworkSecurity.cpp
          #include "NetworkSecurity.h"
          
          #include <jni.h>
          #include <string>
          
          extern "C"
          jstring Java_com_will_core_network_implementation_security_NetworkSecurityImpl_getAccessToken(
                  JNIEnv *env,
                  __attribute__((unused)) jobject object
          ) {
              std::string access_token = "${{ secrets.ACCESS_TOKEN }}";
              return env->NewStringUTF(access_token.c_str());
          }
          EOF

      - name: Unit Tests
        run: ./gradlew testDebug

      - name: Build APK (Debug)
        run: ./gradlew assembleDebug

      - name: Upload APK as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk

  deploy-release:
    needs: create-apk
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

  deploy-debug:
    needs: create-apk
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: debug-apk 

      - name: Get branch name
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/release/}" >> $GITHUB_ENV

      - name: Create a release
        run: |
          git config --global user.email "cd@cd.com"
          git config --global user.name "CD Bot"     
          
          VERSION=$BRANCH_NAME
          gh release create "release-$VERSION" app-debug.apk --title "Release $VERSION" --notes "Release generated on $(date)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}